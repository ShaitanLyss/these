{
    "prompt": "Approximate the solution of the Poisson problem -\u0394u=f in a two-dimensional circular domain with a hole using lowest order continuous finite elements (Q1) on a quadrilateral mesh. Enumerate degrees of freedom (DoFs) associated with mesh vertices, output their spatial distribution, analyze the sparsity pattern of the resulting system matrix, and improve matrix bandwidth by renumbering DoFs using the Cuthill-McKee algorithm.",
    "completion": "#include <deal.II/grid/tria.h>\n#include <deal.II/grid/grid_generator.h>\n#include <deal.II/grid/grid_out.h>\n\n#include <deal.II/dofs/dof_handler.h>\n\n#include <deal.II/fe/fe_q.h>\n#include <deal.II/dofs/dof_tools.h>\n#include <deal.II/fe/mapping_q1.h>\n\n#include <deal.II/lac/sparse_matrix.h>\n#include <deal.II/lac/dynamic_sparsity_pattern.h>\n\n#include <deal.II/dofs/dof_renumbering.h>\n\n#include <fstream>\n\nusing namespace dealii;\n\nvoid make_grid(Triangulation<2> &triangulation)\n{\n  const Point<2> center(1, 0);\n  const double inner_radius = 0.5, outer_radius = 1.0;\n  GridGenerator::hyper_shell(triangulation, center, inner_radius, outer_radius, 5);\n\n  for (unsigned int step = 0; step < 3; ++step)\n    {\n      for (const auto &cell : triangulation.active_cell_iterators())\n        for (const auto v : cell->vertex_indices())\n          {\n            const double distance_from_center = center.distance(cell->vertex(v));\n\n            if (std::fabs(distance_from_center - inner_radius) <= 1e-6 * inner_radius)\n              {\n                cell->set_refine_flag();\n                break;\n              }\n          }\n\n      triangulation.execute_coarsening_and_refinement();\n    }\n\n  std::ofstream mesh_file(\"mesh.gnuplot\");\n  GridOut().write_gnuplot(triangulation, mesh_file);\n}\n\nvoid write_dof_locations(const DoFHandler<2> &dof_handler, const std::string &filename)\n{\n  const std::map<types::global_dof_index, Point<2>> dof_location_map =\n    DoFTools::map_dofs_to_support_points(MappingQ1<2>(), dof_handler);\n\n  std::ofstream dof_location_file(filename);\n  DoFTools::write_gnuplot_dof_support_point_info(dof_location_file, dof_location_map);\n}\n\nvoid distribute_dofs(DoFHandler<2> &dof_handler)\n{\n  const FE_Q<2> finite_element(1); // lowest order continuous finite element\n  dof_handler.distribute_dofs(finite_element);\n\n  write_dof_locations(dof_handler, \"dof-locations-1.gnuplot\");\n\n  DynamicSparsityPattern dynamic_sparsity_pattern(dof_handler.n_dofs(), dof_handler.n_dofs());\n  DoFTools::make_sparsity_pattern(dof_handler, dynamic_sparsity_pattern);\n\n  SparsityPattern sparsity_pattern;\n  sparsity_pattern.copy_from(dynamic_sparsity_pattern);\n\n  std::ofstream out(\"sparsity-pattern-1.svg\");\n  sparsity_pattern.print_svg(out);\n}\n\nvoid renumber_dofs(DoFHandler<2> &dof_handler)\n{\n  DoFRenumbering::Cuthill_McKee(dof_handler);\n\n  write_dof_locations(dof_handler, \"dof-locations-2.gnuplot\");\n\n  DynamicSparsityPattern dynamic_sparsity_pattern(dof_handler.n_dofs(), dof_handler.n_dofs());\n  DoFTools::make_sparsity_pattern(dof_handler, dynamic_sparsity_pattern);\n\n  SparsityPattern sparsity_pattern;\n  sparsity_pattern.copy_from(dynamic_sparsity_pattern);\n\n  std::ofstream out(\"sparsity-pattern-2.svg\");\n  sparsity_pattern.print_svg(out);\n}\n\nint main()\n{\n  Triangulation<2> triangulation;\n  make_grid(triangulation);\n\n  DoFHandler<2> dof_handler(triangulation);\n\n  distribute_dofs(dof_handler);\n  renumber_dofs(dof_handler);\n}\n"
}